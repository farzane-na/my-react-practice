{
    "blog":[
        {
            "id":1,
            "title":"React Conf 2024 Recap",
            "date":"May 22, 2024",
            "author":" Ricky Hanlon",
            "text":"Last week we hosted React Conf 2024, a two-day conference in Henderson, Nevada where 700+ attendees     gathered in-person to discuss the latest in UI engineering. This was our first in-person conference since 2019, and we were thrilled to be able to bring the community together again. At React Conf 2024, we announced the React   19 RC, the React Native New Architecture Beta, and an experimental release of the React Compiler.\n The community   also took the stage to announce React Router v7, Universal Server Components in Expo Router, React Server     Components in RedwoodJS, and much more.The entire day 1 and day 2 streams are available online. In this post,   we’ll summarize the talks and announcements from the event.\nTo kick off day 1, Meta CTO Andrew “Boz” Bosworth  shared a welcome message followed by an introduction by Seth Webster, who manages the React Org at Meta, and our     MC Ashley Narcisse.In the day 1 keynote, Joe Savona shared our goals and vision for React to make it easy for   anyone to build great user experiences. Lauren Tan followed with a State of React, where she shared that React was    downloaded over 1 billion times in 2023, and that 37% of new developers learn to program with React.\n Finally, she  highlighted the work of the React community to make React, React.",
            "image":"./images/react/1.jpg",
            "sumary":"Last week we hosted React Conf 2024, a two-day conference in Henderson, Nevada where 700+ attendees     gathered in-person to discuss the latest in UI engineering."
        },
        {
            "id":2,
            "title":"React 19 RC",
            "date":"April 25, 2024",
            "author":"The React Team",
            "text":"In our React 19 RC Upgrade Guide, we shared step-by-step instructions for upgrading your app to React 19. In this post, we’ll give an overview of the new features in React 19, and how you can adopt them.\n  A common use case in React apps is to perform a data mutation and then update state in response. For example, when a user submits a form to change their name, you will make an API request, and then handle the response. In the past, you would need to handle pending states, errors, optimistic updates, and sequential requests manually.In React 19, we’re adding support for using async functions in transitions to handle pending states, errors, forms, and optimistic updates automatically.\n The async transition will immediately set the isPending state to true, make the async request(s), and switch isPending to false after any transitions. This allows you to keep the current UI responsive and interactive while the data is changing. Building on top of Actions, React 19 introduces useOptimistic to manage optimistic updates, and a new hook React.useActionState to handle common cases for Actions.\n  In react-dom we’re adding <form> Actions to manage forms automatically and useFormStatus to support the common cases for Actions in forms. useActionState accepts a function (the “Action”), and returns a wrapped Action to call. This works because Actions compose. When the wrapped Action is called, useActionState will return the last result of the Action as data, and the pending state of the Action as pending.",
            "image":"./images/react/2.jpg",
            "sumary":"In our React 19 RC Upgrade Guide, we shared step-by-step instructions for upgrading your app to React 19. In this post, we’ll give an overview of the new features in React 19, and how you can adopt them."
        },
        {
            "id":3,
            "title":"React 19 RC Upgrade Guide",
            "date":"April 25, 2024",
            "author":"Ricky Hanlon",
            "text":"The improvements added to React 19 RC require some breaking changes, but we’ve worked to make the upgrade as smooth as possible, and we don’t expect the changes to impact most apps. To help make the upgrade to React 19 easier, we’ve published a react@18.3 release that is identical to 18.2 but adds warnings for deprecated APIs and other changes that are needed for React 19. If you’d like to help us test React 19, follow the steps in this upgrade guide and report any issues you encounter.\n For a list of new features added to React 19, see the React 19 release post. We introduced a new JSX transform in 2020 to improve bundle size and use JSX without importing React. In React 19, we’re adding additional improvements like using ref as a prop and JSX speed improvements that require the new transform. If you’re using TypeScript, you also need to update the types.\n Once React 19 is released as stable, you can install the types as usual from @types/react and @types/react-dom.  If you’re using TypeScript, you also need to update the types. Once React 19 is released as stable, you can install the types as usual from @types/react and @types/react-dom.  Until the stable release, the types are available in different packages which need to be enforced in your package.json: In previous versions of React, errors thrown during render were caught and rethrown.\n In DEV, we would also log to console.error, resulting in duplicate error logs.",
            "image":"./images/react/3.jpg",
            "sumary":"The improvements added to React 19 RC require some breaking changes, but we’ve worked to make the upgrade as smooth as possible, and we don’t expect the changes to impact most apps. "
        },
        {
            "id":4,
            "title":"React Labs: What We've Been Working On – February 2024",
            "date":"February 15, 2024",
            "author":"Joseph Savona, Ricky Hanlon, Andrew Clark, Matt Carroll, and Dan Abramov.",
            "text":"The improvements added to React 19 RC require some breaking changes, but we’ve worked to make the upgrade as smooth as possible, and we don’t expect the changes to impact most apps.\n To help make the upgrade to React 19 easier, we’ve published a react@18.3 release that is identical to 18.2 but adds warnings for deprecated APIs and other changes that are needed for React 19. If you’d like to help us test React 19, follow the steps in this upgrade guide and report any issues you encounter. For a list of new features added to React 19, see the React 19 release post. We introduced a new JSX transform in 2020 to improve bundle size and use JSX without importing React. In React 19, we’re adding additional improvements like using ref as a prop and JSX speed improvements that require the new transform. If you’re using TypeScript, you also need to update the types.\n Once React 19 is released as stable, you can install the types as usual from @types/react and @types/react-dom.  If you’re using TypeScript, you also need to update the types.\n Once React 19 is released as stable, you can install the types as usual from @types/react and @types/react-dom.  Until the stable release, the types are available in different packages which need to be enforced in your package.json: In previous versions of React, errors thrown during render were caught and rethrown. In DEV, we would also log to console.error, resulting in duplicate error logs.",
            "image":"./images/react/4.jpg",
            "sumary":"The improvements added to React 19 RC require some breaking changes, but we’ve worked to make the upgrade as smooth as possible, and we don’t expect the changes to impact most apps."
        },
        {
            "id":5,
            "title":"React Canaries: Enabling Incremental Feature Rollout Outside Meta",
            "date":"May 3, 2023 ",
            "author":"Dan Abramov, Sophie Alpert, Rick Hanlon, Sebastian Markbåge, and Andrew Clark",
            "text":"The improvements added to React 19 RC require some breaking changes, but we’ve worked to make the upgrade as smooth as possible, and we don’t expect the changes to impact most apps.\n To help make the upgrade to React 19 easier, we’ve published a react@18.3 release that is identical to 18.2 but adds warnings for deprecated APIs and other changes that are needed for React 19. If you’d like to help us test React 19, follow the steps in this upgrade guide and report any issues you encounter. For a list of new features added to React 19, see the React 19 release post. We introduced a new JSX transform in 2020 to improve bundle size and use JSX without importing React. In React 19, we’re adding additional improvements like using ref as a prop and JSX speed improvements that require the new transform. If you’re using TypeScript, you also need to update the types. Once React 19 is released as stable, you can install the types as usual from @types/react and @types/react-dom.  If you’re using TypeScript, you also need to update the types.\n Once React 19 is released as stable, you can install the types as usual from @types/react and @types/react-dom.  Until the stable release, the types are available in different packages which need to be enforced in your package.json: In previous versions of React, errors thrown during render were caught and rethrown. In DEV, we would also log to console.error, resulting in duplicate error logs.",
            "image":"./images/react/5.jpg",
            "sumary":"The improvements added to React 19 RC require some breaking changes, but we’ve worked to make the upgrade as smooth as possible, and we don’t expect the changes to impact most apps."
        },
        {
            "id":6,
            "title":"Introducing react.dev",
            "date":"March 16, 2023 ",
            "author":"Dan Abramov and Rachel Nabors",
            "text":"The improvements added to React 19 RC require some breaking changes, but we’ve worked to make the upgrade as smooth as possible, and we don’t expect the changes to impact most apps. To help make the upgrade to React 19 easier, we’ve published a react@18.3 release that is identical to 18.2 but adds warnings for deprecated APIs and other changes that are needed for React 19.\n If you’d like to help us test React 19, follow the steps in this upgrade guide and report any issues you encounter. For a list of new features added to React 19, see the React 19 release post. We introduced a new JSX transform in 2020 to improve bundle size and use JSX without importing React. In React 19, we’re adding additional improvements like using ref as a prop and JSX speed improvements that require the new transform. If you’re using TypeScript, you also need to update the types. Once React 19 is released as stable, you can install the types as usual from @types/react and @types/react-dom.  If you’re using TypeScript, you also need to update the types. Once React 19 is released as stable, you can install the types as usual from @types/react and @types/react-dom.\n  Until the stable release, the types are available in different packages which need to be enforced in your package.json: In previous versions of React, errors thrown during render were caught and rethrown. In DEV, we would also log to console.error, resulting in duplicate error logs.",
            "image":"./images/react/6.jpg",
            "sumary":"The improvements added to React 19 RC require some breaking changes, but we’ve worked to make the upgrade as smooth as possible, and we don’t expect the changes to impact most apps."
        },
        {
            "id":7,
            "title":"React Labs: What We've Been Working On – March 2023",
            "date":"March 22, 2023",
            "author":"Joseph Savona, Josh Story, Lauren Tan, Mengdi Chen, Samuel Susla, Sathya Gunasekaran, Sebastian Markbåge, and Andrew Clark",
            "text":"The improvements added to React 19 RC require some breaking changes, but we’ve worked to make the upgrade as smooth as possible, and we don’t expect the changes to impact most apps. To help make the upgrade to React 19 easier, we’ve published a react@18.3 release that is identical to 18.2 but adds warnings for deprecated APIs and other changes that are needed for React 19. If you’d like to help us test React 19, follow the steps in this upgrade guide and report any issues you encounter.\n For a list of new features added to React 19, see the React 19 release post. We introduced a new JSX transform in 2020 to improve bundle size and use JSX without importing React. In React 19, we’re adding additional improvements like using ref as a prop and JSX speed improvements that require the new transform. If you’re using TypeScript, you also need to update the types. Once React 19 is released as stable, you can install the types as usual from @types/react and @types/react-dom.  If you’re using TypeScript, you also need to update the types.\n Once React 19 is released as stable, you can install the types as usual from @types/react and @types/react-dom.  Until the stable release, the types are available in different packages which need to be enforced in your package.json: In previous versions of React, errors thrown during render were caught and rethrown.\n In DEV, we would also log to console.error, resulting in duplicate error logs.",
            "image":"./images/react/7.jpg",
            "sumary":"The improvements added to React 19 RC require some breaking changes, but we’ve worked to make the upgrade as smooth as possible, and we don’t expect the changes to impact most apps."
        }
    ],
    "library":[
        {
            "id":1,
            "title":"react-icon",
            "img":"./images/libs/1.png",
            "text":"Include popular icons in your React projects easily with react-icons, which utilizes ES6 imports that allows you to include only the icons that your project is using. View the documentation for further usage examples and how to use icons from other packages. NOTE: each Icon package has it's own subfolder under react-icons you import from. If your project grows in size, this option is available. This method has the trade-off that it takes a long time to install the package. Include popular icons in your React projects easily with react-icons, which utilizes ES6 imports that allows you to include only the icons that your project is using. View the documentation for further usage examples and how to use icons from other packages. NOTE: each Icon package has it's own subfolder under react-icons you import from. If your project grows in size, this option is available. This method has the trade-off that it takes a long time to install the package.",
            "lastVersion":"5.3.0 "
        },
        {
            "id":2,
            "title":"json-server",
            "img":"./images/libs/2.jpg",
            "text":"One of the most common responsibilities for front-end developers is handling the data in their front-end applications. You’ll need to be able to retrieve data from an API, manipulate it, and then render it on the screen in a modern web application for user interactions. Efficient communication between the front-end and back-end is crucial for creating seamless and responsive applications. Now imagine a scenario where you're working with a backend developer on a project and you're waiting on the API endpoint in order to connect to your frontend. \n There's a great tool that front-end developers can use to create a mock or dummy API during the development phase. This tool is called a JSON Server. In this article, you’ll learn how to use JSON servers for data storage in your React applications.\n You'll learn about the features and benefits, and a practical implementation in a front-end project. The application will enable users to view a list of users and their details. The user's data will be created using JSON Server in a JSON file in the frontend application. JSON is an acronym for JavaScript Object Notation. JSON Server is a lightweight and easy-to-use Node.js tool that simulates a RESTful API using a JSON file as the data source. With JSON Server, front-end developers can create mock APIs without the need to write complex server-side code, or when a backend API isn't ready yet.\n This mock API sends requests to an endpoint that will be provided. It responds to HTTP requests, and this makes it ideal for rapid development for front-end developers. JSON Server also enables developers to perform CRUD operations and saves data in JSON files.",
            "lastVersion":"1.0.0-beta.3"
        },
        {
            "id":3,
            "title":"Axios",
            "img":"./images/libs/3.jpg",
            "lastVersion":"1.7.7",
            "text":"As a largely self-taught developer, I’ve put the wide world of free/paid internet tutorials through it’s paces. Something I see pop up again and again in tutorials performing HTTP requests is the use of a JavaScript library called Axios. I wanted to understand why such a wide range of web development educators were making use of this seemingly inconspicuous library. So I decided to dig in to deliver a very simple, straightforward explanation of what Axios offers and why it’s (probably) worth using. \n In a nutshell, Axios is a Javascript library used to make HTTP requests from node.js or XMLHttpRequests from the browser that also supports the ES6 Promise API. Great, so from that we gather it does something that we can already do and that has recently been made significantly better… So why bother? \n Fetch uses a two-step process when dealing with JSON data; after making an initial request you’ll then need to call the .json() method on the response in order to receive the actual data object. \n There’s some extra work we need to put in on our end (again, it could be argued that this is just a matter of syntax memorization) for the desired result when it comes to properly logging response errors with .fetch(). MDN explains: \n A fetch() promise will reject with a TypeError when a network error is encountered or CORS is misconfigured on the server side, although this usually means permission issues or similar — a 404 does not constitute a network error, for example."
        },
        {
            "id":4,
            "title":"formik",
            "img":"./images/libs/4.jpg",
            "lastVersion":"2.4.6 ",
            "text":"Welcome to the Formik tutorial. This will teach you everything you need to know to build simple and complex forms in React.\n If you’re impatient and just want to start hacking on your machine locally, check out the 60-second quickstart.\n What are we building?\n In this tutorial, we’ll build a complex newsletter signup form with React and Formik.\n You can see what we’ll be building here: Final Result. If the code doesn’t make sense to you, don’t worry! The goal of this tutorial is to help you understand Formik.\n Prerequisites\n You’ll need to have familiarity with HTML, CSS, modern JavaScript, and React (and React Hooks) to fully understand Formik and how it works. In this tutorial, we’re using arrow functions, let, const, spread syntax, destructuring, computed property names, and async/await . You can use the Babel REPL to check what ES6 code compiles to.\n Setup for the Tutorial\n There are two ways to complete this tutorial: you can either write the code in your browser, or you can set up a local development environment on your computer.\n Setup Option 1: Write Code in the Browser\n This is the quickest way to get started!\n First, open this Starter Code in a new tab. The new tab should display an email address input, a submit button, and some React code. We’ll be editing the React code in this tutorial.\n Skip the second setup option, and go to the Overview section to get an overview of Formik. \n Setup Option 2: Local Development Environment\n This is completely optional and not required for this tutorial!"
        },
        {
            "id":5,
            "title":"react-google-recapcha",
            "img":"./images/libs/5.png",
            "lastVersion":"3.1.0",
            "text":"Google reCAPTCHA is a technology developed by Google to distinguish between human users and automated bots on websites. It’s a system used to verify that the user interacting with a website is a human and not a malicious script or bot. reCAPTCHA presents users with challenges, such as selecting specific images from a grid or solving simple puzzles, to confirm their humanity.\n  Preventing Spam and Abuse : reCAPTCHA helps prevent automated bots from flooding websites with spammy or malicious content, protecting the integrity of online platforms and user experiences.\n  Enhancing Security : By verifying that users are human, reCAPTCHA strengthens the security of websites and reduces the risk of unauthorized access, fraud, and other forms of cyberattacks. \n Protecting User Experience : Spam and automated attacks can degrade the user experience on websites by inundating users with irrelevant or harmful content. reCAPTCHA helps maintain a clean and safe environment for users to interact with websites.\n  In this tutorial, we’ll create a login page to login users with their email address and password. Then we’ll add a reCAPTCHA to the login form to verify if the user is a human and filter out bots and spam."
        },
        {
            "id":6,
            "title":"react-hook-form",
            "img":"./images/libs/6.jpg",
            "lastVersion":"7.53.0",
            "text":"Most applications have forms to collect data, depending on the use case, implementing forms can be pretty complex, especially when building enterprise-level applications that provide an intuitive and flawless user experience. As a developer, it is highly likely that you have stumbled across building forms in most of your projects. Of course, you can manage simple forms on your own but after a point, it becomes sensible to use a library that abstracts a lot of work involved in handling complex forms.\n  React Hook Form is one such library that helps to manage complex forms. It comes with great performance, is super lightweight, has zero dependencies, can be easily integrated with different React UI frameworks like Material, Antd, and provides an intuitive API and excellent developer experience.\n Validations are part and parcel of almost every form, they’re an application’s first line of defense against unwanted data. Validations ensure that incorrect data doesn’t reach the backend servers and eventually the databases. Ideally in most software data is validated at every layer i.e the Frontend, Backend, and Database.\n React hook form also supports integration with well known schema validation libraries. You can use libraries like Zod, Joi, or Yup inside your forms along with React hook form. Let us check out an example with the Yup schema validation library."
        },
        {
            "id":7,
            "title":"reacharts",
            "img":"./images/libs/7.png",
            "lastVersion":"0.4.5",
            "text":"Recharts is a popular charting library for React. It provides many visualization and customization options to use with analytics data in PostHog.\n To provide examples of what you can do with it, we create a basic React app, set it up to get data from PostHog's query API, and visualize it with Recharts.\n Start by creating a personal API key. You can do this by going to personal API keys in your project settings, clicking Create personal API key, giving it a label, choosing the Performing analytics queries scope (AKA query read), and clicking Create key.\n  Warning: The following is a simplified example. Exposing your personal API key (like we do below) exposes your private PostHog data to the public internet, so don't do this in real life. Make sure your personal API key isn't exposed and your query request happens securely on the server side.\n The last visualization we can set up is a pie chart of operating systems. We can get the data by getting a count of $pageview events by properties.$os. We then format this data and set up custom labels and colors for the pie chart."
        }
    ]
}